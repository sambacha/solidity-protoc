// Code generated by protoc-gen-sol. DO NOT EDIT.
// source: a.proto
pragma solidity >=0.5.0;
import "./Pb.sol";

library PbA {
    using Pb for Pb.Buffer;  // so we can call Pb funcs on Buffer obj

    enum MyEnum { E0, E1 }

    // MyEnum[] decode function
    function MyEnums(uint[] memory arr) internal pure returns (MyEnum[] memory t) {
        t = new MyEnum[](arr.length);
        for (uint i = 0; i < t.length; i++) { t[i] = MyEnum(arr[i]); }
    }

    struct A {
        uint64 f1;   // tag: 1
    } // end struct A

    function decA(bytes memory raw) internal pure returns (A memory m) {
        Pb.Buffer memory buf = Pb.fromBytes(raw);

        uint tag;
        Pb.WireType wire;
        while (buf.hasMore()) {
            (tag, wire) = buf.decKey();
            if (false) {} // solidity has no switch/case
            else if (tag == 1) {
                m.f1 = uint64(buf.decVarint());
            }
            else { buf.skipValue(wire); } // skip value of unknown tag
        }
    } // end decoder A

}
