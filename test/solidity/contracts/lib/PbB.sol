// Code generated by protoc-gen-sol. DO NOT EDIT.
// source: b.proto
pragma solidity >=0.5.0;
import "./Pb.sol";
import "./PbA.sol";

library PbB {
    using Pb for Pb.Buffer;  // so we can call Pb funcs on Buffer obj

    struct B {
        PbA.A i;   // tag: 1
        PbA.A[] alist;   // tag: 2
        PbA.MyEnum e;   // tag: 3
        PbA.MyEnum[] elist;   // tag: 4
    } // end struct B

    function decB(bytes memory raw) internal pure returns (B memory m) {
        Pb.Buffer memory buf = Pb.fromBytes(raw);

        uint[] memory cnts = buf.cntTags(4);
        m.alist = new PbA.A[](cnts[2]);
        cnts[2] = 0;  // reset counter for later use
        
        uint tag;
        Pb.WireType wire;
        while (buf.hasMore()) {
            (tag, wire) = buf.decKey();
            if (false) {} // solidity has no switch/case
            else if (tag == 1) {
                m.i = PbA.decA(buf.decBytes());
            }
            else if (tag == 2) {
                m.alist[cnts[2]] = PbA.decA(buf.decBytes());
                cnts[2]++;
            }
            else if (tag == 3) {
                m.e = PbA.MyEnum(buf.decVarint());
            }
            else if (tag == 4) {
                m.elist = PbA.MyEnums(buf.decPacked());
            }
            else { buf.skipValue(wire); } // skip value of unknown tag
        }
    } // end decoder B

}
